/* The classes are named using the format {property}{sides}-{size} for 
 * xs and {property}{sides}-{breakpoint}-{size} for sm, md, lg, and xl.
 */

 /*
 Where property is one of:

m - for classes that set margin
p - for classes that set padding
Where sides is one of:

t - for classes that set margin-top or padding-top
b - for classes that set margin-bottom or padding-bottom
l - for classes that set margin-left or padding-left
r - for classes that set margin-right or padding-right
x - for classes that set both *-left and *-right
y - for classes that set both *-top and *-bottom
blank - for classes that set a margin or padding on all 4 sides of the element
Where size is one of:

0 - for classes that eliminate the margin or padding by setting it to 0
1 - (by default) for classes that set the margin or padding to $spacer * .25
2 - (by default) for classes that set the margin or padding to $spacer * .5
3 - (by default) for classes that set the margin or padding to $spacer
4 - (by default) for classes that set the margin or padding to $spacer * 1.5
5 - (by default) for classes that set the margin or padding to $spacer * 3
auto - for classes that set the margin to auto

*/


@import "../abstracts/mixins/_breakpoint.scss";

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @if($min != 0) {
        @return $min;
    } @else {
        @return null;
    }
    // @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
//media-breakpoint-up



@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @if(breakpoint-min($name, $breakpoints) == null) {
        @return "";
    } @else {
        @return "-#{$name}";
    }
    // @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  

 @each $breakpoint in map-keys($grid-breakpoints) {
     @include min-breakpoint-up($breakpoint) {
         $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $prop, $abbrev in (margin: m, padding: p) {
            @each $size, $length in $spacers {
              .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
              .#{$abbrev}t#{$infix}-#{$size},
              .#{$abbrev}y#{$infix}-#{$size} {
                #{$prop}-top: $length !important;
              }
              .#{$abbrev}r#{$infix}-#{$size},
              .#{$abbrev}x#{$infix}-#{$size} {
                #{$prop}-right: $length !important;
              }
              .#{$abbrev}b#{$infix}-#{$size},
              .#{$abbrev}y#{$infix}-#{$size} {
                #{$prop}-bottom: $length !important;
              }
              .#{$abbrev}l#{$infix}-#{$size},
              .#{$abbrev}x#{$infix}-#{$size} {
                #{$prop}-left: $length !important;
              }
            }
          }
     }
 }